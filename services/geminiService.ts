

import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { API_KEY_ERROR_MESSAGE, GEMINI_TEXT_MODEL, GEMINI_CHAT_DRAFT_MODEL } from '../constants';
import { RatingHistoryEntry } from '../types';

const API_KEY = process.env.API_KEY;

let ai: GoogleGenAI | null = null;
if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
} else {
  console.error(API_KEY_ERROR_MESSAGE);
}

export const analyzeSentiment = async (text: string): Promise<'positive' | 'negative' | 'neutral' | 'unknown'> => {
  if (!ai) {
    console.warn("Gemini AI SDK not initialized due to missing API key. Sentiment analysis disabled.");
    return 'unknown';
  }

  const prompt = `Analiza el sentimiento del siguiente texto y clasif√≠calo como "positive", "negative", o "neutral". Responde solo con una de esas tres palabras. Texto: "${text}"`;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_TEXT_MODEL,
        contents: prompt,
    });
    const resultText = response.text.trim().toLowerCase();
    if (resultText === 'positive' || resultText === 'negative' || resultText === 'neutral') {
      return resultText;
    }
    console.warn(`Unexpected sentiment analysis response: ${resultText}`);
    return 'unknown';
  } catch (error) {
    console.error("Error analyzing sentiment with Gemini:", error);
    return 'unknown';
  }
};

export const getAIAssistantResponse = async (userQuestion: string, busLineName: string, combinedContext: string): Promise<string> => {
  if (!ai) {
    console.warn("Gemini AI SDK not initialized due to missing API key. AI Assistant disabled.");
    throw new Error("El asistente IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
  }

  const systemInstruction = `Eres UppA, un asistente virtual amigable y servicial para la l√≠nea de colectivo ${busLineName} en Argentina. 
  Tu conocimiento se basa en informaci√≥n general de la l√≠nea (como rutas, horarios, paradas principales) y tambi√©n en los reportes recientes de los usuarios que te proporciono. 
  Responde las preguntas de los usuarios sobre el estado de la l√≠nea, posibles demoras, problemas, horarios, rutas o consejos generales basados en toda esta informaci√≥n. 
  Si la informaci√≥n no est√° expl√≠citamente en el contexto provisto (tanto general como de reportes), ind√≠calo claramente. 
  S√© conciso, √∫til y responde en espa√±ol. Incorpora emojis relevantes para hacer la respuesta m√°s amigable y visualmente atractiva (por ejemplo, üöå para buses, ‚è∞ para horarios, üö® para emergencias). No inventes informaci√≥n que no est√© en el contexto.`;
  
  const fullPrompt = `Contexto para ${busLineName}:\n${combinedContext}\n\nPregunta del usuario: "${userQuestion}"`;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_TEXT_MODEL,
        contents: fullPrompt,
        config: {
          systemInstruction: systemInstruction,
          temperature: 0.5, 
        }
    });
    return response.text.trim();
  } catch (error: any) {
    console.error("Error getting AI assistant response from Gemini:", error);
    throw new Error(`Error al contactar al asistente IA: ${error.message || 'Fallo en la comunicaci√≥n con el servicio.'}`);
  }
};

export const draftChatResponse = async (originalText: string): Promise<string> => {
  if (!ai) {
    console.warn("Gemini AI SDK not initialized due to missing API key. AI drafting disabled.");
    throw new Error("La funci√≥n de borrador IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
  }

  const systemInstruction = `Eres un asistente de escritura para una app de chat sobre transporte p√∫blico. 
  Tu tarea es mejorar el mensaje de un usuario. Puedes hacerlo m√°s claro, conciso, amigable, o reformularlo si es una pregunta para obtener mejores respuestas.
  Considera el contexto de un chat r√°pido y en movimiento.
  Responde √∫nicamente con el texto mejorado o la sugerencia. No incluyas saludos ni explicaciones sobre tu funci√≥n.`;
  
  const fullPrompt = `Por favor, mejora o reformula el siguiente mensaje para un chat de transporte p√∫blico: "${originalText}"`;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_CHAT_DRAFT_MODEL,
        contents: fullPrompt,
        config: {
          systemInstruction: systemInstruction,
          temperature: 0.7, // Slightly more creative for drafting
        }
    });
    return response.text.trim();
  } catch (error: any) {
    console.error("Error drafting chat response with Gemini:", error);
    throw new Error(`Error al generar borrador con IA: ${error.message || 'Fallo en la comunicaci√≥n con el servicio.'}`);
  }
};


export const getAiRouteSummary = async (originAddress: string, destinationAddress: string, routeInfo: string, userReportsContext: string): Promise<string> => {
    if (!ai) {
        throw new Error("El asistente IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
    }

    const systemInstruction = `Eres UppA, un asistente de planificaci√≥n de viajes para una app de transporte en Argentina. 
    Tu tarea es analizar una ruta de viaje y los reportes recientes de la comunidad para dar un resumen √∫til y consejos.
    Basado en el origen, destino, detalles de la ruta, y los reportes, proporciona:
    1. Un resumen conciso (1-2 frases) del estado general del viaje.
    2. Menciona cualquier problema espec√≠fico de los reportes (demoras, incidentes, etc.) que pueda afectar la ruta.
    3. Ofrece un consejo pr√°ctico (ej. "Considera salir 10 minutos antes por la demora reportada").
    Responde en espa√±ol, de forma amigable y directa. Incorpora emojis relevantes para hacer el resumen m√°s visual (ej. üó∫Ô∏è para rutas, ‚úÖ para consejos, ‚ö†Ô∏è para alertas). No inventes informaci√≥n. Si no hay reportes, simplemente indica que el viaje parece estar sin novedades.`;

    const fullPrompt = `An√°lisis de Viaje:
    - Origen: ${originAddress}
    - Destino: ${destinationAddress}
    - Informaci√≥n de la Ruta: ${routeInfo}
    - Reportes Recientes de la Comunidad en la Zona: ${userReportsContext || "No hay reportes recientes disponibles."}
    
    Por favor, genera el resumen y consejo del viaje.`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction: systemInstruction,
                temperature: 0.6,
            }
        });
        return response.text.trim();
    } catch (error: any) {
        console.error("Error getting AI route summary from Gemini:", error);
        throw new Error(`Error al generar resumen IA del viaje: ${error.message || 'Fallo en la comunicaci√≥n con el servicio.'}`);
    }
};

export const getReviewSummary = async (comments: string[]): Promise<string> => {
    if (!ai || comments.length === 0) {
        return "No hay suficientes comentarios para generar un resumen.";
    }

    const systemInstruction = `Eres un asistente que resume comentarios de usuarios para un servicio de transporte.
    Analiza los siguientes comentarios y genera un resumen conciso de 1-2 frases que capture los puntos clave, tanto positivos como negativos.
    Responde √∫nicamente con el resumen en espa√±ol.`;

    const fullPrompt = `Por favor, resume los siguientes comentarios de usuarios:\n- ${comments.join('\n- ')}`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction,
                temperature: 0.6,
            }
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error getting AI review summary:", error);
        return "No se pudo generar el resumen.";
    }
};

export const getPredictiveAlerts = async (reviews: RatingHistoryEntry[]): Promise<string> => {
    if (!ai || reviews.length < 3) {
        return "No hay suficientes datos para generar una alerta predictiva. Se necesita m√°s feedback de la comunidad.";
    }

    const systemInstruction = `Eres un analista de datos experto para una app de transporte. Tu trabajo es identificar patrones preocupantes en las rese√±as negativas de los usuarios para generar una alerta proactiva para el equipo de operaciones.
    **El texto del comentario del usuario es la fuente de informaci√≥n m√°s importante, ya que contiene el contexto detallado del problema.** Analiza las rese√±as proporcionadas, prestando especial atenci√≥n a los comentarios.
    Busca problemas recurrentes, menciones de seguridad, higiene o comportamiento del conductor. No te limites a los n√∫meros de calificaci√≥n; profundiza en el significado de los comentarios.
    Tu respuesta debe ser una alerta clara y accionable en espa√±ol, con el formato:
    **Alerta Predictiva:** [Descripci√≥n del patr√≥n detectado]
    **Sugerencia Operativa:** [Acci√≥n recomendada para mitigar el problema]
    Si no encuentras un patr√≥n claro, indica "No se detectaron patrones de alerta significativos en los datos actuales."`;

    const reviewData = reviews.map(r => 
        `Rating: ${r.overallRating}/5. Scores: Limpieza(${r.scores.cleanliness}), Seguridad(${r.scores.safety}), Puntualidad(${r.scores.punctuality}), Amabilidad(${r.scores.kindness}). Comentario: "${r.comment || 'N/A'}"`
    ).join('\n');

    const fullPrompt = `Analiza los siguientes datos de rese√±as para generar una alerta predictiva. Enf√≥cate en los comentarios para entender el contexto real:\n${reviewData}`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction,
                temperature: 0.7,
            }
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error getting AI predictive alert:", error);
        return "Error al generar la alerta predictiva.";
    }
};